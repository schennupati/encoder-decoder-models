model:
    arch: encoder_decoder # Shared encoder and independent decoders
    #arch: encoder_decoder_cascade # Shared encoder and cascaded decoders
    encoder: efficientnet_b1 # resnet 18 and resnet34 are not supported with fpn
    decoder: fpn
    pretrained_path: /home/sumche/results
    loss_fn: addition # log_uncertainity, exp_uncertainity or addition
    task_map: 
        1: [semantic, instance_probs]
        2: instance_regression
tasks:
    semantic:
        active: True
        out_channels: 19
        activation: ReLU
        activate_last: True
        loss: cross_entropy2d
        loss_weight: 1.0
        type: long
        metric: classification_metrics
        postproc: argmax
    instance_regression:
        active: True
        out_channels: 2
        activation: Tanh
        activate_last: False
        loss: mae_loss
        loss_weight: 0.1
        type: float
        metric: None
        postproc: None #cluster_to_instance
    instance_probs:
        active: True
        out_channels: 2
        activation: ReLU
        activate_last: True
        loss: cross_entropy2d
        loss_weight: 1.0
        type: long
        metric: classification_metrics
        postproc: argmax
    instance_heatmaps:
        active: False
        out_channels: 1
        activation: ReLU
        activate_last: True
        loss: instance_loss
        loss_weight: 1.0
        type: float
        metric: regression_metrics
        postproc: None 
    disparity:
        active: False
        out_channels: 1
        activation: ReLU
        activate_last: True
        loss: mae_loss
        loss_weight: 1.0
        type: float
        metric: regression_metrics
        postproc: None
        
        
data:
    dataset: Cityscapes
    root_path: /home/sumche/datasets/Cityscapes
    im_size: &im_size 512
    random_scaling: &random_scaling !!python/tuple [0.5, 1.0]
    val_im_size: &val_im_size 1024
    transforms:
        train:
            input:
                RandomScale: 
                    flag: False
                    scale: *random_scaling        
                RandomCrop: 
                    flag: True
                    size: *im_size
                ColorJitter: 
                    flag: False
                    brightness: 0.25
                    contrast: 0.25
                    saturation: 0.25 
                    hue: 0.25
                Resize:
                    flag: False
                    size: *im_size
                ToTensor:
                    flag: True
                Normalize:
                    flag: False
                    mean: [0.485, 0.456, 0.406]
                    std:  [0.229, 0.224, 0.225]
            target:
                RandomScale: 
                    flag: False
                    scale: *random_scaling        
                RandomCrop: 
                    flag: True
                    size: *im_size
                Resize:
                    flag: False
                    size: *im_size
                ToTensor:
                    flag: True
        val:
            input:
                Resize:
                    flag: True
                    size: *val_im_size
                ToTensor:
                    flag: True
                Normalize:
                    flag: False
                    mean: [0.485, 0.456, 0.406]
                    std:  [0.229, 0.224, 0.225]
            target:
                Resize:
                    flag: True
                    size: *val_im_size
                ToTensor:
                    flag: True
                    
params:
    savelogs: True
    batchsize: &batch_size 4
    n_workers: &n_workers 8
    multigpu: True
    gpu_id: 1
    print_interval: 50
    resume: True
    early_stop: True
    patience: 25
    epochs: 100
    train:
        batch_size: *batch_size
        shuffle: True
        n_workers: *n_workers
        optimizer:
            name: adam
            lr: 1.0e-3
            amsgrad: True
            weight_decay: 1.0e-4
    val:
        batch_size: *batch_size
        shuffle: True
        n_workers: *n_workers

